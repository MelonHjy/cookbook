1.19 转换并同时计算数据
当生成器表达式作为一个单独参数传递给函数，不需要多加一个括号，下面这些语句是等效的：
nums = [1, 2, 3, 4, 5]
s = sum((x * x for x in nums)) # 显示的传递一个生成器表达式对象
s = sum(x * x for x in nums) # 更加优雅的实现方式，省略了括号
若不使用生成器表达式：
s = sum([x * x for x in nums])
可以达到一样的效果，但是它需先创建一个额外的列表，且仅仅被使用一次就被丢弃。而生成器方案会以迭代的方式转换数据，因此更省内存
某些特定的换算函数可接受一个key参数，当倾向于使用生成器时会有帮助：
portfolio = [
    {'name':'GOOG', 'shares': 50},
    {'name':'YHOO', 'shares': 75},
]
# Original: Returns 20
min_shares = min(s['shares'] for s in portfolio)
# Alternative: Returns {'name': 'AOL', 'shares': 20}
min_shares = min(portfolio, key=lambda s: s['shares'])
---------------------------------------------------------------------------------------
1.20 合并多个字典或映射
a = {'x': 1, 'z': 3 }
b = {'y': 2, 'z': 4 }
使用update()方法将两个字典合并
>>> merged = dict(b)
>>> merged.update(a)
>>> merged['x']   # 1
>>> merged['y']   # 2
>>> merged['z']   # 3
能行得通，但是需要单独构建一个完整的字典对象(或者修改其中现有的一个字典结构，这破坏了原始数据)
如果原字典做了更新，这种改变不会反应到新的合并字典中：
>>> a['x'] = 13
>>> merged['x']   # 1

使用collections模块中的ChainMap类
from collections import ChainMap
c = ChainMap(a,b)
print(c['x']) # Outputs 1 (from a)
print(c['y']) # Outputs 2 (from b)
print(c['z']) # Outputs 3 (from a)
ChainMap可接受多个映射然后在逻辑上使它们表现为一个单独的映射结构，但是这些映射在字面上并不会合并在一起
ChainMap只是简单地维护一个记录底层映射关系的列表，然后重定义常见的字典操作来扫描这个列表
>>> len(c)   # 3
>>> list(c.keys())   # ['x', 'y', 'z']
>>> list(c.values())   # [1, 2, 3]
ChianMap使用原来的字典，它自己不创建新的字典
如果有重复的键，会采用第一个映射中所对应的值，且修改映射的操作总是会作用在列出的第一个映射结构上
>>> c['z'] = 10
>>> c['w'] = 40
>>> del c['x']
>>> a   # {'w': 40, 'z': 10}
>>> del c['y']
Traceback (most recent call last):
...
KeyError: "Key not found in the first mapping: 'y'"
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
ChainMap与带哟作用域的值，比如编程语言中的变量（全局变量、局部变量）一起工作是特别有用
>>> values = ChainMap()
>>> values['x'] = 1
>>> values = values.new_child()  # Add a new mapping
>>> values['x'] = 2
>>> values = values.new_child()  # Add a new mapping
>>> values['x'] = 3
>>> values
ChainMap({'x': 3}, {'x': 2}, {'x': 1})
>>> values['x']
3
>>> values = values.parents   # Discard last mapping
>>> values['x']
2
>>> values = values.parents   # Discard last mapping
>>> values['x']
1
>>> values
ChainMap({'x': 1})
