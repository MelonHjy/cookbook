1.1 将序列分解为单独的变量
p = (4, 5)
x, y = p
只要对象是可迭代的，就可以执行分解操作，包括字符串、文件、迭代器以及生成器
可以选一个用不到的变量名，作为要丢弃的值的名称
--------------------------------------------------------------------------
1.2 从任意长度的可迭代对象中分解元素
items = [1, 10, 7, 4, 5, 9]
head, *tail = items
分解未知或任意长度的可迭代对象（会有一些已知的组件或模式），利用*表达式分解可迭代对象使得开发者能够轻松利用
------------------------------------------------------------------------------------------------------
1.3 保存最后N个元素
保存 有限 的历史记录是collection.deque 的完美应用场景
deque(maxlen=N)创建了一个固定长度的队列。当有新记录加入而队列已满时会自动移除最老的那条记录（用列表会更麻烦）
如果不指定队列的大小，就得到了一个无限界的队列，可以在两端执行添加和弹出操作
--------------------------------------------------------------------------------------------------------
1.4 找到最大或最少的N个元素
当N与集合元素总数比很小，用heapq.heapify,该函数会先在底层将数据转化为列表，且元素会以堆的顺序排列
堆数据结构最重要的特征是heap[0]永远是最小的元素。调用heapq.heappop()方法会先将第一个元素弹出，然后用下一个最小的元素来取代(时间复杂度仅是O(N))
>>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
>>> import heapq
>>> heapq.heapify(nums)
>>> nums
[-4, 2, 1, 23, 7, 2, 18, 23, 42, 37, 8]
>>> heapq.heappop(nums)
-4
集合元素总数相对比较小，用nlargest() 和 nsmallest()
portfolio = [
    {'name': 'IBM', 'shares': 100, 'price': 91.1},
    {'name': 'AAPL', 'shares': 50, 'price': 543.22}
]
cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])
唯一的最小或最大(N=1)的元素，用min()和max()函数会更快
N的大小和集合大小接近，通常先排序这个集合然后再使用切片操作会更快
函数nlargest() 和 nsmallest()会有优化措施：如果N快接近集合大小，会采用排序的方法
---------------------------------------------------------------------------------
1.5 实现优先级队列
函数 heapq.heappush() 和 heapq.heappop() 分别在队列_queue上插入和删除第一个元素，并且队列_queue保证第一个元素拥有最小优先级
push和pop操作时间复杂度为O(N)
队列以元祖(-priority, index, item)组成，-priority是为了让队列按元素优先级从高到低排列，正常的堆排列是相反的
index变量的作用是保证同等优先级元素的正确排序。
首先Item实例是不支持排序的；而使用元组 (priority, item)，当两个元素的优先级不同就能比较，但是相同则出错；
通过引入另外的index变量组成三元组(priority, index, item)，因为不可能有两个元素有相同的index值，
Python在做元组比较时候，如果前面的比较以及可以确定结果了，后面的比较操作就不会发生
import heapq
class PriorityQueue:
    def __init__(self):
        self._queue = []
        self._index = 0
    def push(self, item, priority):
        heapq.heappush(self._queue, (-priority, self._index, item))
        self._index += 1
    def pop(self):
        return heapq.heappop(self._queue)[-1]
下面是它的使用方式：
>>> class Item:
...     def __init__(self, name):
...         self.name = name
...     def __repr__(self):
...         return 'Item({!r})'.format(self.name)   # !r 将self.name转化为repr
>>> q = PriorityQueue()
>>> q.push(Item('foo'), 1)
>>> q.push(Item('bar'), 5)
>>> q.push(Item('grok'), 1)
>>> q.pop()   # Item('bar')
>>> q.pop()   # Item('foo')
>>> q.pop()   # Item('grok')
第一个pop()操作返回优先级最高的元素。如果两个有着相同优先级的元素(foo 和 grok)，pop操作按照它们被插入到队列的顺序返回。
